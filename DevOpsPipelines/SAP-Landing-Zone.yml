# This Pipeline deploys the SAP landing zone with Terraform

parameters:
- name: size
  displayName: HANA VM Size
  type: string
  default: M32ts_192_GB
  values:
  - E16ds_v4_128_GB-Non-PRD
  - E20ds_v4_160_GB-Non-PRD
  - M32ts_192_GB
  - M32ls_256_GB
  - E48ds_v4_384_GB-Non-PRD
  - M64ls_512_GB
  - M32dms_v2_875_GB
  - M64ds_v2_1.000_GB
  - M64dms_v2_1.792_GB
  - M128ds_v2_2.000_GB
  - M208s_v2_2.850_GB
  - M128dms_v2_3.892_GB
  - M208ms_v2_5.700_GB
  - M416ms_v2_11.400_GB

- name: os
  displayName: Operating System
  type: string
  default: "SLES 12 SP4"
  values:
  - "RHEL 7.7"
  - "RHEL 8.1"
  - "SLES 12 SP4"
  - "SLES 12 SP5"
  - "SLES 15 SP2"

- name: sid
  displayName: HANA System ID
  type: string
  default: "HDB"

- name: nr
  displayName: HANA Instance Number (00-99)
  type: string
  default: "20"

- name: vmname
  displayName: HANA VM Name in Azure
  type: string
  default: "HANATEST"

- name: hostname
  displayName: HANA Host Name in the OS
  type: string
  default: "hanatest"

- name: location
  displayName: Target Region
  type: string
  default: "France Central"
  values:
  - "West Europe"
  - "France Central"
  - "Germany West Central"

- name: vnet_subnet
  displayName: Target VNET & Subnet
  type: string
  default: "vnet-sap-prod-francecentral-001/subnets/snet-sap-prod-francecentral-001"
  values:
  - "vnet-sap-prod-westeurope-001/subnets/snet-sap-prod-westeurope-001"
  - "vnet-sap-prod-francecentral-001/subnets/snet-sap-prod-francecentral-001"
  - "vnet-sap-prod-germanywestcentral-001/subnets/snet-sap-prod-germanywestcentral-001"
  # Adapt according to your target landing zone
  # "<VNET>/subnets/<subnet>"

- name: availzone
  displayName: Availability Zone
  type: number
  default: 0
  values:
  - 0
  - 1
  - 2
  - 3

- name: hanavmdeployment
  displayName: HANA VM Deployment
  type: boolean
  default: true

- name: osprep
  displayName: OS Preparations
  type: boolean
  default: true

- name: hanadbinstallation
  displayName: HANA DB Installation
  type: boolean
  default: true

- name: hanabackupsetup
  displayName: HANA Backup Setup
  type: string
  default: "Non-PROD"
  values:
  - "Non-PROD"
  - "PROD"
  - "None"

- name: monitoringextsap
  displayName: Azure Monitoring Extension for SAP
  type: boolean
  default: True

- name: xsasetup
  displayName: Install XSA components
  type: boolean
  default: False

- name: hcmt
  displayName: HANA performance checks
  type: boolean
  default: False

- name: cleanup
  displayName: Remove everything at the end
  type: boolean
  default: False

trigger:
  none

pool:
  name: $(AgentPool)

variables:
  backuptype: ${{ parameters.hanabackupsetup }}
  backuptodo: $[ ne(variables['backuptype'], 'None') ]
  hanadbinst: ${{ parameters.hanadbinstallation }}
  hanavmrg: RG-HANA-${{ parameters.sid }}
  hanavmfqdn: ${{ parameters.hostname }}.$(privatednszone)
  containersuffix: "$(hanavmrg);${{ parameters.vmname }}"
  hanabackupcontainer: "VMAppContainer;Compute;$(containersuffix)"
  hanavmid: /subscriptions/$(subscription)/resourceGroups/$(hanavmrg)/providers/Microsoft.Compute/virtualMachines/${{ parameters.vmname }}
  subnetid: /subscriptions/$(subscription)/resourceGroups/$(vnet-rg)/providers/Microsoft.Network/virtualNetworks/${{ parameters.vnet_subnet }}
  osvar: ${{ parameters.os }}
  usepyth3: $[ or(eq(variables['osvar'], 'SLES 15 SP2'),eq(variables['osvar'], 'RHEL 8')) ]

name: ${{ parameters.vmname }}_${{ parameters.sid }}_${{ parameters.nr }}_${{ parameters.os }}_$(SourceBranchName)_$(Date:yyyyMMdd)$(Rev:.r)

stages:
- stage: Publish_Pipeline_Artifact
  jobs:
  - job: Publish_Pipeline_Artifact
    steps:
    - task: PublishPipelineArtifact@1
      displayName: 'Publish Pipeline Artifact'
      inputs:
        targetPath: '$(System.DefaultWorkingDirectory)'
        artifact: hana

- stage: Terraform
  jobs:
  - job: Download Terraform
    steps:
    displayName: Download Terraform
    - script: |
        #!/bin/bash
        mkdir -p ~/bin
        wget https://releases.hashicorp.com/terraform/0.15.5/terraform_0.15.5_linux_amd64.zip
	      unzip terraform_0.15.5_linux_amd64.zip
        mv terraform ~/bin
      

    - task: AzureResourceManagerTemplateDeployment@3
      displayName: 'SAP HANA VM Deployment via ARM'
      inputs:
        deploymentScope: 'Resource Group'
        azureResourceManagerConnection: '$(azureconnectionname)'
        subscriptionId: '$(subscription)'
        action: 'Create Or Update Resource Group'
        resourceGroupName: '$(hanavmrg)'
        location: ${{ parameters.location }}
        templateLocation: 'URL of the file'
        csmFileLink: 'https://raw.githubusercontent.com/$(gituser)/sap-hana-vm/$(Build.SourceBranchName)/ARM-Template/hana-vm.json'
        overrideParameters: '-adminUsername "$(adminuser)" -vmNameInput "${{ parameters.vmname }}" -HostNameInput "${{ parameters.hostname }}" -hanaSystemId "${{ parameters.sid }}" -hanaSystemSize "${{ parameters.size }}" -osType "${{ parameters.os }}" -adminPasswordOrKey "$(pubsshkey)" -subnetId "$(subnetid)" -availabilityZone "${{ parameters.availzone }}" -BackupTag "${{ parameters.hanabackupsetup }}" -Script_URL "$(url-disk-cfg)" -diagnosticsStorageAccountName "$(diagnosticsstorageaccountname)" '
        deploymentMode: 'Complete'
        deploymentName: 'hana-vm-${{ parameters.sid }}-$(Build.BuildId)'
        deploymentOutputs: 'arm_output'

    - task: PowerShell@2
      displayName: 'Get ARM Output variables'
      # https://www.timmerman.it/index.php/using-values-from-your-arm-template-across-your-azure-devops-pipeline-with-powershell/
      inputs:
        targetType: 'filePath'
        filePath: '$(System.DefaultWorkingDirectory)/Scripts/Parse_ARM_Deployment_Output.ps1'
        arguments: -ArmOutputString '$(arm_output)' -MakeOutput -ErrorAction Stop
        errorActionPreference: stop
        showWarnings: true

    - script: |
        #!/bin/bash
        mkdir -p ~/Inventory
        echo $(arm_output) > ~/Inventory/${{ parameters.vmname }}.json
      displayName: Write Inventory JSON
      failOnStderr: false

    - script: |
        #!/bin/bash
        mkdir -p ~/Inventory
        echo $(arm_output.hanavmname.value)  > ~/Inventory/${{ parameters.vmname }}.hanavmname
        echo $(arm_output.hanadbid.value)     > ~/Inventory/${{ parameters.vmname }}.hanadbid
        echo $(arm_output.privateip.value)  > ~/Inventory/${{ parameters.vmname }}.privateip
      displayName: Write Inventory files
      failOnStderr: false

- stage: Prepare_OS
  condition: eq(${{ parameters.osprep }}, true )
  jobs:
  - job: Prepare_OS
    steps:
    - checkout: none
    - script: |
        #!/bin/bash
        privateip=`cat ~/Inventory/${{ parameters.vmname }}.privateip`
        echo "##vso[task.setvariable variable=privateip]$privateip"
        entry=`ssh-keygen -F $privateip`
        if [[ -n $entry ]]
        then
          echo "Known host entry will be removed"
          ssh-keygen -f "~/.ssh/known_hosts" -R $privateip
        else
          echo "No entry found, nothing to remove"
        fi
        exit 0
      displayName: Remove known_hosts entries from former runs that used the same name
      failOnStderr: false

    - script: until ping -c1 $(privateip) >/dev/null 2>&1; do :; done
      displayName: Wait until IP is accessible $(privateip)
      failOnStderr: false

    - task: Ansible@0
      displayName: 'OS Preparations RHEL8 / SLES 15(Ansible)'
      inputs:
        ansibleInterface: 'agentMachine'
        playbookPathOnAgentMachine: 'Ansible/os-settings_playbook.yml'
        inventoriesAgentMachine: inlineContent
        inventoryInlineContentAgentMachine: |
          [hana]
          $(privateip)
        args: -vv -e 'ansible_python_interpreter=/usr/bin/python3'
        failOnStdErr: false
      condition: and(eq(${{ parameters.osprep }}, true), eq(variables.usepyth3, true))

    - task: Ansible@0
      displayName: 'OS Preparations RHEL7 / SLES 12 (Ansible)'
      inputs:
        ansibleInterface: 'agentMachine'
        playbookPathOnAgentMachine: 'Ansible/os-settings_playbook.yml'
        inventoriesAgentMachine: inlineContent
        inventoryInlineContentAgentMachine: |
          [hana]
          $(privateip)
        args: -vv 
        failOnStdErr: false
      condition: and(eq(${{ parameters.osprep }}, true), eq(variables.usepyth3, false))

- stage: Install_HANA
  condition: eq(${{ parameters.hanadbinstallation }}, true)
  jobs:
  - job: Install_HANA
    steps:
    - checkout: none
    - script: |
        #!/bin/bash
        privateip=`cat ~/Inventory/${{ parameters.vmname }}.privateip`
        echo "##vso[task.setvariable variable=privateip]$privateip"
        exit 0
      displayName: Get private IP for following ansible tasks 
      failOnStderr: false
    - task: Ansible@0
      displayName: 'HANA Installation (Ansible)'
      inputs:
        ansibleInterface: 'agentMachine'
        playbookPathOnAgentMachine: 'Ansible/saphana-install_playbook.yml'
        inventoriesAgentMachine: inlineContent
        inventoryInlineContentAgentMachine: |
          [hana]
          $(privateip)
        args: -vv -e sap_sid=${{ parameters.sid }} -e sap_hostname=${{ parameters.hostname }} -e sap_instancenum=${{ parameters.nr }} -e pw_db_system=$(hana-pw) 
        failOnStdErr: false

